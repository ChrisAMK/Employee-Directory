{"version":3,"sources":["components/Header.js","components/Search.js","components/EmployeeCard.js","components/EmployeesTable.js","utils/API.js","components/EmployeeDirectory.js","App.js","index.js"],"names":["Header","props","className","React","Component","Search","htmlFor","type","onChange","this","filterNames","placeholder","EmployeeCard","displayProperDate","dateString","dob","toString","yearEnd","indexOf","year","substring","monthEnd","month","substr","day","order","image","name","phone","src","alt","EmployeeTable","renderEmployee","employee","index","undefined","display","key","email","title","onClick","sortNames","employees","sortArrow","map","axios","get","EmployeeDirectory","state","query","sortedEmployees","sortType","generateNewEmployeeList","newEmployeeList","date","first","last","picture","large","setState","event","target","value","newEmployeeTable","length","toLowerCase","sort","dynamicSort","property","sortOrder","a","b","localeCompare","getEmployees","API","then","res","data","results","catch","err","console","log","employeesList","sortState","EmployeesTable","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.696f1629.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/style.css\";\n\nclass Header extends React.Component {\n\n    render(props) {\n\n        return (\n            <div>\n                <h1 className=\"header\">Employee Directory</h1>\n                <h6 className=\"desc\">Search for an Employee Below</h6>\n            </div>\n        )\n    }\n}\n\nexport default Header","import React from \"react\";\nimport \"../css/style.css\";\n\nclass Search extends React.Component {\n    render() {\n        return (\n            <div>\n                <form className=\"searchForm\">\n                    <div className=\"form-group mb-2 searchDiv\">\n                        <label htmlFor=\"Search\" className=\" sr-only searchLabel\">Search a Name</label>\n                        <input type=\"text\" className=\"form-control SearchInput\" onChange={this.props.filterNames} placeholder=\"Search a name\" />\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Search;","import React from \"react\";\nimport '../css/style.css';\n\nclass EmployeeCard extends React.Component {\n\n  displayProperDate = () => {\n    const dateString = this.props.dob.toString();\n    const yearEnd = dateString.indexOf('-');\n    const year = dateString.substring(0, yearEnd);\n    const monthEnd = dateString.indexOf('-', yearEnd + 1);\n    let month = dateString.substring(yearEnd + 1, monthEnd);\n    month = (month.substr(0, 1) === '0') ? month.substr(1) : month;\n    let day = dateString.substr(monthEnd + 1, 2);\n    day = (day.substr(0, 1) === '0') ? day.substr(1) : day;\n\n    return `${day}-${month}-${year}`;\n    \n}\n\n  render() {\n    // Deconstruction the props variables so that we can use them in our JSX\n    const { order, image, name, phone } = this.props\n\n    return (\n      <tr>\n        <td className=\"idRow\">{order}</td>\n        <td className=\"imgRow\"><img src={image} alt={name} /></td>\n        <td className=\"nameRow\">{name}</td>\n        <td className=\"phoneRow\">{phone}</td>\n        <td className=\"dobRow\">{this.displayProperDate()}</td>\n      </tr>\n    )\n  }\n}\n\nexport default EmployeeCard;\n","import React from \"react\";\nimport EmployeeCard from \"./EmployeeCard\";\nimport '../css/style.css';\n\nclass EmployeeTable extends React.Component {\n\n    // here we are checking if the component is ready to be displayed, when ready we return the EmployeeCard component\n    renderEmployee = (employee, index) => {\n        let displayed;\n\n        if (employee.display === undefined) {\n            displayed = true;\n        } else {\n            displayed = employee.display;\n        }\n\n        if (displayed === true) {\n            return (\n                <EmployeeCard \n                    key={index}\n                    order={index + 1}\n                    image={employee.image}\n                    name={employee.name}\n                    phone={employee.phone}\n                    email={employee.email}\n                    dob={employee.dob}\n                />\n            );\n        }\n\n    }\n\n\n    // Inside this component we are setting the Heading and then adding EmployeeCards for each iteration of the Employees that are in the Props\n    render() {\n        return (\n            <div className=\"row\">\n                <table className=\"tableHead col-12 col-sm-12 col-md-12 col-lg-12\">\n                    <thead className=\"\">\n                        <tr className=\"rowHeading\">\n                            <th>#id</th>\n                            <th>Image</th>\n                            <th title=\"Sort By Name\" onClick={() => this.props.sortNames(this.props.employees)}>Name {this.props.sortArrow}</th>\n                            <th>Phone</th>\n                            <th>DOB</th>\n                        </tr>\n                    </thead>\n                    <tbody className=\"tableBody\">\n                        {   \n                            this.props.employees.map((employee, index) => (\n                                this.renderEmployee(employee, index)\n                            ))\n                        }\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}\n\nexport default EmployeeTable;","import axios from \"axios\";\n\nexport default {\n  getEmployees: function() {\n    return axios.get(\"https://randomuser.me/api/?inc=name,email,dob,picture,phone&nat=us&results=50\");\n  }\n};\n","import React from \"react\";\nimport Header from \"./Header\";\nimport Search from \"./Search\";\nimport EmployeesTable from \"./EmployeesTable\";\nimport API from \"../utils/API\"\n\n\nclass EmployeeDirectory extends React.Component {\n\n  // State is like a in Component Database\n  state = {\n    employees: [],\n    query: '',\n    sortedEmployees: [],\n    sortType: ''\n  }\n\n  // The ComponentDidMount Function is invoked immediately after the component is mounted, mounting is what we call when the Component\n  // Is first added to the DOM\n  componentDidMount() {\n    this.getEmployees();\n  }\n\n  // Here we are registering a function that will use the API method to perform a get request to retrieve the employee data list\n  getEmployees() {\n    API.getEmployees()\n    .then(res => {\n      // Once we have the data we are passing it to another function that will map each result into a new list\n      this.generateNewEmployeeList(res.data.results);\n    })\n    .catch(err => console.log(err));\n  }\n\n  // For every employee passed in as a parameter we are mapping each to a variable called newEmployeeList\n  generateNewEmployeeList = (employees) => {\n    const newEmployeeList = employees.map((employee => {\n      return (\n        {\n          dob: employee.dob.date,\n          email: employee.dob.email,\n          name: `${employee.name.first} ${employee.name.last}`,\n          phone: employee.phone,\n          image: employee.picture.large\n        }\n      )\n    }))\n\n    this.setState({ employees: newEmployeeList })\n  }\n\n  // This function handles sorting Filtering by names\n  filterNames = event => {\n    const query = event.target.value;\n    this.setState({query}, () => {\n      let employeesList;\n\n      // if there is any changed to the search value, the employeelist is now equal to sorted employees\n      if (this.state.sortedEmployees.length > 0) {\n        employeesList = this.state.sortedEmployees;\n      } else {\n        employeesList = this.state.employees;\n      }\n\n      // The the new table of employees is then mapped to New employee table\n      const newEmployeeTable = employeesList.map(employee => {\n        let name = employee.name.toLowerCase();\n\n        if (name.indexOf(this.state.query.toLowerCase()) !== -1) {\n          return {...employee, display: true}\n        } else {\n          return {...employee, display: false}\n        }\n      });\n\n      // updating the state to the new Employee Table\n      this.setState({\n        employees: newEmployeeTable,\n        sortedEmployees: newEmployeeTable\n      });\n\n    });\n  }\n\n  // Here we are sorting the names in ascending order or descending order\n  sortNames = (employees) => {\n    const sortType = this.state.sortType;\n\n    // the sort type is desc or blank, we sort name and then set the sort type state to ascending\n    if (sortType === 'desc' || sortType === '') {\n      employees.sort(this.dynamicSort(\"name\"));\n      this.setState({\n        sortedEmployees: employees,\n        sortType: 'asc'\n      });\n\n    } else if (sortType === 'asc') {\n      employees.sort(this.dynamicSort(\"-name\"));\n      this.setState({\n        sortedEmployees: employees,\n        sortType: 'desc'\n      });\n    }\n  }\n\n  // this helper function aids the sortNames function\n  dynamicSort = property => {\n    var sortOrder = 1;\n    if (property[0] === \"-\") {\n      sortOrder = -1;\n      property = property.substr(1);\n    }\n\n    // we are returning a binary result from localeCompare\n    return function (a,b) {\n      if (sortOrder === -1) {\n        return b[property].localeCompare(a[property]);\n      } else {\n        return a[property].localeCompare(b[property]);\n      }\n    }\n  }\n\n  // Render function is what is within the rendered component\n  render() {\n\n    let employeesList;\n\n    if (this.state.sortedEmployees.length > 0) {\n      employeesList = this.state.sortedEmployees;\n    } else {\n      employeesList = this.state.employees;\n    }\n\n    let sortArrow;\n\n    const sortState = this.state.sortType;\n\n    if (sortState === 'asc') {\n      //down arrow\n      sortArrow = <span>&#9660;</span>;\n      } else if (sortState === 'desc') {\n      //up arrow\n      sortArrow = <span>&#9650;</span>;\n      } else {\n      sortArrow = '';\n    }\n    \n    return (\n      <div className=\"container directoryContainer\">\n        <Header />\n        <Search filterNames={this.filterNames} query={this.state.query}/>\n        <EmployeesTable employees={employeesList} sortNames={this.sortNames} sortArrow={sortArrow}/>\n      </div>\n    );\n  }\n}\n\nexport default EmployeeDirectory;\n","import React from \"react\";\nimport EmployeeDirectory from \"./components/EmployeeDirectory\";\n\nfunction App() {\n  return <EmployeeDirectory />;\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}